{"version":3,"sources":["screens/project-list/util.ts","auth-provider.ts","context/auth-context.tsx","utils/url.ts","utils/user.ts","components/profiler.tsx","utils/reorder.ts","utils/use-optimistic-options.ts","screens/project-list/search-panel.tsx","components/pin.tsx","screens/project-list/list.tsx","screens/project-list/index.tsx","components/user-select.tsx","utils/use-async.ts","components/id.select.tsx","reportWebVitals.ts","context/index.tsx","components/error-boundary.tsx","App.tsx","index.tsx","utils/index.ts","utils/http.ts","components/lib.tsx","utils/project.ts"],"names":["useProjectSearchParams","useUrlQueryParam","param","setParam","useMemo","personId","Number","undefined","useProjectQueryKey","useProjectModal","projectCreate","setProjectCreate","editingProjectId","setEditingProjectId","useProject","editingProject","data","isLoading","setUrlParams","useSetUrlSearchParam","projectModalOpen","Boolean","open","close","starEdit","id","console","log","API","process","localToken","getToken","window","localStorage","getItem","handleUserResponse","user","setItem","token","login","fetch","method","headers","body","JSON","stringify","then","response","a","ok","json","Promise","reject","register","logout","removeItem","location","href","AuthContext","React","createContext","displayName","defaultUser","auth","http","AuthProvider","children","useAsync","setUser","setData","isIdle","isError","error","queryClient","useQueryClient","useMount","Provider","value","form","clear","useAuth","context","useContext","Error","keys","useSearchParams","searchParams","setSearchParams","useState","stateKeys","subset","Object","fromEntries","params","o","cleanObj","useUsers","client","useHttp","useQuery","queue","setInterval","length","queueToSend","Profiler","metadata","phases","props","onRender","phase","actualDuration","baseDuration","startTime","commitTime","interactions","includes","push","reorder","fromId","type","referenceId","list","copiedList","movingItemIndex","findIndex","item","insertAfter","targetIndex","insertBefore","from","to","toItem","removedItem","splice","toIndex","indexOf","useConfig","queryKey","callback","onSuccess","invalidateQueries","onMutate","target","previousItems","getQueryData","setQueryData","old","onError","newItems","useDeleteConfig","filter","project","useEditConfig","map","useAddConfig","useReorderKanbanConfig","useReorderTaskConfig","kanbanId","toKanbanId","SearchPanel","style","marginBottom","layout","action","Item","placeholder","name","onChange","evt","defaultOptionName","Pin","checked","onCheckChanged","restProps","count","num","List","users","mutate","useEditProject","pagination","rowKey","columns","title","disabled","render","pin","sorter","b","localeCompare","dataIndex","created","dayjs","format","find","More","deleteProject","useDeleteProject","overlay","onClick","Modal","confirm","content","okText","onOk","confirmDeleteProject","ProjectListScreen","useDocumentTitle","debParam","useDebounce","useProjects","Container","justify","loading","dataSource","ErrorBox","message","Text","styled","div","UserSelect","options","defaultInitialState","stat","defaultConfig","throwOnError","initialState","initialConfig","config","useReducer","state","safeDispatch","dispatch","mountedRef","useMountRef","useCallback","current","useSafeDispatch","retry","setRetry","setError","run","promise","runConfig","catch","isSuccess","IdSelect","toNumber","Option","option","isNaN","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","AppProviders","QueryClient","defaultOptions","queries","refetchOnWindowFocus","ErrorBoundary","this","fallbackRender","Component","AuthenticatedApp","lazy","UnauthenticatedApp","App","className","FullPageErrorMes","Suspense","fallback","loadServer","ReactDOM","StrictMode","document","getElementById","obj","result","forEach","key","isVoid","useEffect","delay","debValue","setDebValue","timeout","setTimeout","clearTimeout","keepOnUnmount","oldTitle","useRef","resetRoutes","origin","filteredEntries","entries","apiUrl","endpoint","customConfig","Authorization","toUpperCase","qs","status","reload","Row","between","gap","FullPage","FullPageLoading","size","ButtonNoPadding","Button","ScreenContainer","useMutation","useAddProject","enabled"],"mappings":"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","file":"static/js/main.f62b624d.chunk.js","sourcesContent":["import { useMemo } from \"react\";\r\nimport { useProject } from \"utils/project\";\r\nimport { useSetUrlSearchParam, useUrlQueryParam } from \"utils/url\";\r\n\r\n// 项目列表搜索的参数\r\nexport const useProjectSearchParams = () => {\r\n  const [param, setParam] = useUrlQueryParam([\"name\", \"personId\"]);\r\n\r\n  return [\r\n    //   防止Effect循环\r\n    useMemo(\r\n      () => ({\r\n        ...param,\r\n        personId: Number(param.personId) || undefined,\r\n      }),\r\n      [param]\r\n    ),\r\n    setParam,\r\n  ] as const;\r\n};\r\n\r\nexport const useProjectQueryKey = () => {\r\n  const [param] = useProjectSearchParams();\r\n  return [\"projects\", param];\r\n};\r\n\r\n// 用url管理模态框状态\r\n// 相当于全局状态管理器\r\nexport const useProjectModal = () => {\r\n  const [{ projectCreate }, setProjectCreate] = useUrlQueryParam([\r\n    \"projectCreate\",\r\n  ]);\r\n  const [{ editingProjectId }, setEditingProjectId] = useUrlQueryParam([\r\n    \"editingProjectId\",\r\n  ]);\r\n  // 获取详情\r\n  const { data: editingProject, isLoading } = useProject(\r\n    Number(editingProjectId)\r\n  );\r\n  const setUrlParams = useSetUrlSearchParam();\r\n\r\n  const open = () => setProjectCreate({ projectCreate: true });\r\n  const close = () => setUrlParams({ projectCreate: \"\", editingProjectId: \"\" });\r\n  const starEdit = (id: Number) => {\r\n    setEditingProjectId({ editingProjectId: id });\r\n    console.log(Boolean(editingProject));\r\n  };\r\n\r\n  // 返回元组的好处：在解构时，可以随意命名\r\n  // return [projectCreate === \"true\", open, close] as const;\r\n  // 返回3-4个以上，使用对象比较好\r\n  return {\r\n    projectModalOpen: projectCreate === \"true\" || Boolean(editingProjectId),\r\n    open,\r\n    close,\r\n    starEdit,\r\n    editingProject,\r\n    isLoading,\r\n  };\r\n};\r\n","// 在真实环境中，如果使用firebase这种第三方auth服务的话，本文件不需要开发者开发\r\n\r\nimport { User } from \"type/user\";\r\nimport { AuthForm } from \"context/auth-context\";\r\n\r\nconst API = process.env.REACT_APP_API_URL;\r\nconst localToken = \"_auth_token\";\r\n\r\nexport const getToken = () => window.localStorage.getItem(localToken);\r\n\r\nexport const handleUserResponse = ({ user }: { user: User }) => {\r\n  window.localStorage.setItem(localToken, user.token || \"\");\r\n  return user;\r\n};\r\n\r\nexport const login = (data: AuthForm) => {\r\n  return fetch(`${API}/login`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(data),\r\n  }).then(async (response) => {\r\n    if (response.ok) {\r\n      return handleUserResponse(await response.json());\r\n    } else {\r\n      return Promise.reject(await response.json());\r\n    }\r\n  });\r\n};\r\n\r\nexport const register = (data: AuthForm) => {\r\n  return fetch(`${API}/register`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify(data),\r\n  }).then(async (response) => {\r\n    if (response.ok) {\r\n      return handleUserResponse(await response.json());\r\n    } else {\r\n      return Promise.reject(await response.json());\r\n    }\r\n  });\r\n};\r\n\r\nexport const logout = async () => {\r\n  window.localStorage.removeItem(localToken);\r\n  window.location.href = \"/\";\r\n};\r\n","import { FullPageErrorMes, FullPageLoading } from \"components/lib\";\r\nimport React, { ReactNode } from \"react\";\r\nimport { useQueryClient } from \"react-query\";\r\nimport { User } from \"type/user\";\r\nimport { useMount } from \"utils\";\r\nimport { http } from \"utils/http\";\r\nimport { useAsync } from \"utils/use-async\";\r\nimport * as auth from \"../auth-provider\";\r\n\r\nexport interface AuthForm {\r\n  username: string;\r\n  password: string;\r\n}\r\n\r\n// 解决value的类型是undefined\r\nconst AuthContext = React.createContext<\r\n  | {\r\n      user: User | null;\r\n      login: (form: AuthForm) => Promise<void>;\r\n      logout: () => Promise<void>;\r\n      register: (form: AuthForm) => Promise<void>;\r\n    }\r\n  | undefined\r\n>(undefined);\r\n\r\nAuthContext.displayName = \"AuthContext\";\r\n// 在页面刷新时更新token的值\r\nexport const defaultUser = async () => {\r\n  let user = null;\r\n  const token = auth.getToken();\r\n  if (token) {\r\n    const data = await http(\"me\", { token });\r\n    user = data.user;\r\n  }\r\n  return user;\r\n};\r\n\r\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\r\n  const {\r\n    data: user,\r\n    setData: setUser,\r\n    isIdle,\r\n    isLoading,\r\n    isError,\r\n    error,\r\n  } = useAsync<User | null>();\r\n\r\n  const queryClient = useQueryClient();\r\n\r\n  const login = (form: AuthForm) => auth.login(form).then(setUser);\r\n  const register = (form: AuthForm) => auth.register(form).then(setUser);\r\n  const logout = () =>\r\n    auth.logout().then(() => {\r\n      setUser(null);\r\n      queryClient.clear();\r\n    });\r\n\r\n  // 页面加载时，更新user\r\n  useMount(() => {\r\n    defaultUser().then(setUser);\r\n  });\r\n  if (isIdle || isLoading) {\r\n    return <FullPageLoading />;\r\n  }\r\n  if (isError) {\r\n    return <FullPageErrorMes error={error} />;\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      children={children}\r\n      value={{ user, login, logout, register }}\r\n    />\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  // 使用context\r\n  const context = React.useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error(\"useAuth 必须在AuthProvider中使用\");\r\n  }\r\n  return context;\r\n};\r\n","import { useMemo, useState } from \"react\";\r\nimport { URLSearchParamsInit, useSearchParams } from \"react-router-dom\";\r\nimport { cleanObj, subset } from \"utils\";\r\n/**\r\n *\r\n * @param key 返回页面url中，指定键的参数值\r\n * http://localhost:3000/projects?name=骑手\r\n * @returns\r\n */\r\n// 从url中读取值\r\n// export const useUrlQueryParam = <K extends string>(keys: K[]) => {\r\n//   const [searchParams] = useSearchParams();\r\n//   const setSearchParam = useSetUrlSearchParam();\r\n//   return [\r\n//     //   解决无限循环\r\n//     useMemo(\r\n//       () =>\r\n//         keys.reduce((pre, key) => {\r\n//           // 如果上面不 extends string\r\n//           // 计算属性名的类型必须为 \"string\"、\"number\"、\"symbol\" 或 \"any\"。\r\n//           return { ...pre, [key]: searchParams.get(key) || \"\" };\r\n//         }, {} as { [key in K]: string }),\r\n//       [searchParams]\r\n//     ),\r\n//     (params: Partial<{ [key in K]: unknown }>) => {\r\n//       return setSearchParam(params);\r\n//     },\r\n//   ] as const;\r\n// };\r\n\r\nexport const useUrlQueryParam = <K extends string>(keys: K[]) => {\r\n  const [searchParams] = useSearchParams();\r\n  const setSearchParams = useSetUrlSearchParam();\r\n  const [stateKeys] = useState(keys);\r\n  return [\r\n    useMemo(\r\n      () =>\r\n        subset(Object.fromEntries(searchParams), stateKeys) as {\r\n          [key in K]: string;\r\n        },\r\n      [searchParams, stateKeys]\r\n    ),\r\n    (params: Partial<{ [key in K]: unknown }>) => {\r\n      return setSearchParams(params);\r\n      // iterator\r\n      // iterator: https://codesandbox.io/s/upbeat-wood-bum3j?file=/src/index.js\r\n    },\r\n  ] as const;\r\n};\r\n\r\n// 设置url的值\r\nexport const useSetUrlSearchParam = () => {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n\r\n  return (params: { [key in string]: unknown }) => {\r\n    const o = cleanObj({\r\n      // Object.fromEntries作用：将数组[value,key]转换成{value:key}的形式\r\n      ...Object.fromEntries(searchParams),\r\n      // 用新的对象覆盖旧的\r\n      ...params,\r\n    }) as URLSearchParamsInit;\r\n    return setSearchParams(o);\r\n  };\r\n};\r\n","import { useQuery } from \"react-query\";\r\nimport { User } from \"type/user\";\r\nimport { useHttp } from \"./http\";\r\n\r\nexport const useUsers = (param?: Partial<User>) => {\r\n  const client = useHttp();\r\n\r\n  return useQuery<User[]>([\"users\", param], () =>\r\n    client(\"users\", { data: param })\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { ProfilerOnRenderCallback, ProfilerProps } from \"react\";\r\n\r\n/**\r\n * 用于追踪性能\r\n */\r\ntype Props = {\r\n  metadata?: any;\r\n  phases?: (\"mount\" | \"update\")[];\r\n} & Omit<ProfilerProps, \"onRender\">;\r\n\r\nlet queue: unknown[] = [];\r\n\r\nconst sendProfileQueue = () => {\r\n  if (!queue.length) {\r\n    return;\r\n  }\r\n  const queueToSend = [...queue];\r\n  queue = [];\r\n  console.log(queueToSend);\r\n};\r\nsetInterval(sendProfileQueue, 5000);\r\n\r\nexport const Profiler = ({ metadata, phases, ...props }: Props) => {\r\n  const resportProfile: ProfilerOnRenderCallback = (\r\n    id,\r\n    phase,\r\n    actualDuration,\r\n    baseDuration,\r\n    startTime,\r\n    commitTime,\r\n    interactions\r\n  ) => {\r\n    if (!phases || phases.includes(phase)) {\r\n      queue.push({\r\n        id,\r\n        phase,\r\n        actualDuration,\r\n        baseDuration,\r\n        startTime,\r\n        commitTime,\r\n        interactions,\r\n        metadata,\r\n      });\r\n    }\r\n  };\r\n  return <React.Profiler onRender={resportProfile} {...props} />;\r\n};\r\n","/**\r\n * 在本地对排序进行乐观更新\r\n * @param fromId 要排序的项目的id\r\n * @param type 'before' | 'after'\r\n * @param referenceId 参照id\r\n * @param list 要排序的列表, 比如tasks, kanbans\r\n */\r\nexport const reorder = ({\r\n  fromId,\r\n  type,\r\n  referenceId,\r\n  list,\r\n}: {\r\n  list: { id: number }[];\r\n  fromId: number;\r\n  type: \"after\" | \"before\";\r\n  referenceId: number;\r\n}) => {\r\n  const copiedList = [...list];\r\n  // 找到fromId对应项目的下标\r\n  const movingItemIndex = copiedList.findIndex((item) => item.id === fromId);\r\n  if (!referenceId) {\r\n    return insertAfter([...copiedList], movingItemIndex, copiedList.length - 1);\r\n  }\r\n  const targetIndex = copiedList.findIndex((item) => item.id === referenceId);\r\n  const insert = type === \"after\" ? insertAfter : insertBefore;\r\n  return insert([...copiedList], movingItemIndex, targetIndex);\r\n};\r\n\r\n/**\r\n * 在list中，把from放在to的前边\r\n * @param list\r\n * @param from\r\n * @param to\r\n */\r\nconst insertBefore = (list: unknown[], from: number, to: number) => {\r\n  const toItem = list[to];\r\n  const removedItem = list.splice(from, 1)[0];\r\n  const toIndex = list.indexOf(toItem);\r\n  list.splice(toIndex, 0, removedItem);\r\n  return list;\r\n};\r\n\r\n/**\r\n * 在list中，把from放在to的后面\r\n * @param list\r\n * @param from\r\n * @param to\r\n */\r\nconst insertAfter = (list: unknown[], from: number, to: number) => {\r\n  const toItem = list[to];\r\n  const removedItem = list.splice(from, 1)[0];\r\n  const toIndex = list.indexOf(toItem);\r\n  list.splice(toIndex + 1, 0, removedItem);\r\n  return list;\r\n};\r\n","import { QueryKey, useQueryClient } from \"react-query\";\r\nimport { Project } from \"type/project\";\r\nimport { Task } from \"type/task\";\r\nimport { reorder } from \"./reorder\";\r\n// 用来生成react-query配置的\r\nexport const useConfig = (\r\n  queryKey: QueryKey,\r\n  callback: (target: any, old?: any) => any[]\r\n) => {\r\n  const queryClient = useQueryClient();\r\n  return {\r\n    onSuccess: () => queryClient.invalidateQueries(queryKey),\r\n    // 乐观更新\r\n    // onMutate 这些on开头的是react-query的生命周期函数\r\n    async onMutate(target: any) {\r\n      // 从缓存中根据queryKey取值\r\n      const previousItems = queryClient.getQueryData(queryKey);\r\n      //   根据传入的callback函数设置queryKey 的值\r\n      queryClient.setQueryData(queryKey, (old?: any[]) => {\r\n        return callback(target, old);\r\n      });\r\n      //   将取到的值返回\r\n      return { previousItems };\r\n    },\r\n    // 出错误的时候回滚\r\n    onError(error: any, newItems: any, context: any) {\r\n      // 错误的时候将设置为原来的值\r\n      queryClient.setQueryData(\r\n        queryKey,\r\n        (context as { previousItems: Project[] }).previousItems\r\n      );\r\n    },\r\n  };\r\n};\r\n\r\nexport const useDeleteConfig = (queryKey: QueryKey) =>\r\n  useConfig(\r\n    queryKey,\r\n    // target是上一层传进来的值\r\n    (target, old) =>\r\n      old?.filter((project: any) => project.id !== target.id) || []\r\n  );\r\nexport const useEditConfig = (queryKey: QueryKey) =>\r\n  useConfig(\r\n    queryKey,\r\n    (target, old) =>\r\n      old?.map((project: any) =>\r\n        project.id === target.id ? { ...project, ...target } : project\r\n      ) || []\r\n  );\r\nexport const useAddConfig = (queryKey: QueryKey) =>\r\n  useConfig(queryKey, (target, old) => (old ? [...old, target] : []));\r\n\r\n// 看板的乐观更新、\r\nexport const useReorderKanbanConfig = (queryKey: QueryKey) =>\r\n  useConfig(queryKey, (target, old) => reorder({ list: old, ...target }));\r\n// Task的乐观更新、\r\nexport const useReorderTaskConfig = (queryKey: QueryKey) =>\r\n  useConfig(queryKey, (target, old) => {\r\n    const orderedList = reorder({ list: old, ...target }) as Task[];\r\n    return orderedList.map((item) =>\r\n      item.id === target.fromId\r\n        ? { ...item, kanbanId: target.toKanbanId }\r\n        : item\r\n    );\r\n  });\r\n","import { Form, Input } from \"antd\";\r\nimport { UserSelect } from \"components/user-select\";\r\nimport React from \"react\";\r\nimport { Project } from \"type/project\";\r\nimport { User } from \"../../type/user\";\r\n\r\ninterface SearchPanelProps {\r\n  users: User[];\r\n  param: Partial<Pick<Project, \"personId\" | \"name\">>;\r\n  setParam: (param: SearchPanelProps[\"param\"]) => void;\r\n}\r\n\r\nexport const SearchPanel = ({ param, setParam }: SearchPanelProps) => {\r\n  // const inputName = (evt) => {\r\n  //   let time;\r\n  //   console.log(\"time1\");\r\n  //   if (time) {\r\n  //     clearTimeout(time);\r\n  //     console.log(\"time2\");\r\n  //   }\r\n  //   time = setTimeout(() => {\r\n  //     console.log(\"time3\", evt.target.value);\r\n  //     setParam({ ...param, name: evt.target.value });\r\n  //   }, 300);\r\n  // };\r\n\r\n  return (\r\n    <Form style={{ marginBottom: \"2rem\" }} layout=\"inline\" action=\"\">\r\n      <Form.Item>\r\n        <Input\r\n          type=\"text\"\r\n          placeholder=\"项目名称\"\r\n          value={param.name}\r\n          onChange={(evt) => setParam({ ...param, name: evt.target.value })}\r\n        />\r\n      </Form.Item>\r\n      <Form.Item>\r\n        <UserSelect\r\n          value={param.personId}\r\n          onChange={(value) => setParam({ ...param, personId: value })}\r\n          defaultOptionName={\"负责人\"}\r\n        />\r\n        {/* <Select\r\n          value={param.personId}\r\n          onChange={(value) => setParam({ ...param, personId: value })}\r\n        >\r\n          <Select.Option value={\"\"}>负责人</Select.Option>\r\n          {users.map((user) => (\r\n            <Select.Option key={user.id} value={String(user.id)}>\r\n              {user.name}\r\n            </Select.Option>\r\n          ))}\r\n        </Select> */}\r\n      </Form.Item>\r\n    </Form>\r\n  );\r\n};\r\n","import { Rate } from \"antd\";\r\nimport React from \"react\";\r\n\r\ninterface PinProps extends React.ComponentProps<typeof Rate> {\r\n  checked: boolean;\r\n  onCheckChanged?: (checked: boolean) => void;\r\n}\r\n\r\nexport const Pin = ({ checked, onCheckChanged, ...restProps }: PinProps) => {\r\n  return (\r\n    <Rate\r\n      count={1}\r\n      value={checked ? 1 : 0}\r\n      onChange={(num) => onCheckChanged?.(!!num)}\r\n      {...restProps}\r\n    />\r\n  );\r\n};\r\n","import { Dropdown, Menu, Modal, Table, TableProps } from \"antd\";\r\nimport { ButtonNoPadding } from \"components/lib\";\r\nimport { Pin } from \"components/pin\";\r\nimport dayjs from \"dayjs\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDeleteProject, useEditProject } from \"utils/project\";\r\nimport { Project } from \"../../type/project\";\r\nimport { User } from \"../../type/user\";\r\nimport { useProjectModal, useProjectQueryKey } from \"./util\";\r\ninterface ListProps extends TableProps<Project> {\r\n  users: User[];\r\n  refresh?: () => void;\r\n}\r\n\r\nexport const List = ({ users, ...props }: ListProps) => {\r\n  const { mutate } = useEditProject(useProjectQueryKey());\r\n\r\n  // 柯里化 id：在函数生成之前就存在，可以先传入，\r\n  // pin是在函数生成的时候才出现，所以后传入\r\n  const handlePinProject = (id: number) => (pin: boolean) =>\r\n    mutate({ id, pin });\r\n\r\n  return (\r\n    <Table\r\n      pagination={false}\r\n      {...props}\r\n      rowKey={\"id\"}\r\n      columns={[\r\n        {\r\n          title: <Pin checked={true} disabled={true} />,\r\n          render: (project) => {\r\n            return (\r\n              <Pin\r\n                checked={project.pin}\r\n                onCheckChanged={handlePinProject(project.id)}\r\n              />\r\n            );\r\n          },\r\n        },\r\n        {\r\n          title: \"名称\",\r\n          sorter: (a, b) => a.name.localeCompare(b.name),\r\n          render(value, project) {\r\n            return <Link to={`${project.id}`}>{project.name}</Link>;\r\n          },\r\n        },\r\n        {\r\n          title: \"部门\",\r\n          dataIndex: \"organization\",\r\n        },\r\n        {\r\n          title: \"创建时间\",\r\n          dataIndex: \"created\",\r\n          render(project) {\r\n            return (\r\n              <span>\r\n                {project.created\r\n                  ? \"无\"\r\n                  : dayjs(project.created).format(\"YYYY-MM-DD\")}\r\n              </span>\r\n            );\r\n          },\r\n        },\r\n        {\r\n          title: \"负责人\",\r\n          dataIndex: \"personId\",\r\n          render(value, project) {\r\n            return (\r\n              <span>\r\n                {users.find((users) => users.id === project.personId)?.name ||\r\n                  \"未知\"}\r\n              </span>\r\n            );\r\n          },\r\n        },\r\n        {\r\n          render(value, project) {\r\n            return <More project={project} />;\r\n          },\r\n        },\r\n      ]}\r\n    />\r\n  );\r\n};\r\n\r\nconst More = ({ project }: { project: Project }) => {\r\n  const { starEdit } = useProjectModal();\r\n  const { mutate: deleteProject } = useDeleteProject(useProjectQueryKey());\r\n  const handleEditProject = (id: number) => () => starEdit(id);\r\n  const confirmDeleteProject = (id: number) => {\r\n    Modal.confirm({\r\n      title: \"确定删除这个项目吗？\",\r\n      content: \"点击确定删除\",\r\n      okText: \"确定\",\r\n      onOk() {\r\n        deleteProject({ id });\r\n      },\r\n    });\r\n  };\r\n  return (\r\n    <Dropdown\r\n      overlay={\r\n        <Menu>\r\n          <Menu.Item onClick={handleEditProject(project.id)} key={\"edit\"}>\r\n            编辑\r\n          </Menu.Item>\r\n          <Menu.Item\r\n            onClick={() => confirmDeleteProject(project.id)}\r\n            key={\"delete\"}\r\n          >\r\n            删除\r\n          </Menu.Item>\r\n        </Menu>\r\n      }\r\n    >\r\n      <ButtonNoPadding type={\"link\"}>. . .</ButtonNoPadding>\r\n    </Dropdown>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nimport { SearchPanel } from \"./search-panel\";\r\nimport { List } from \"./list\";\r\nimport { useDebounce, useDocumentTitle } from \"../../utils\";\r\n\r\nimport styled from \"@emotion/styled\";\r\nimport { useProjects } from \"utils/project\";\r\nimport { useUsers } from \"utils/user\";\r\nimport { Button, Row, Typography } from \"antd\";\r\n// 用来设置网页标题\r\n// import { Helmet } from \"react-helmet\";\r\nimport { useProjectModal, useProjectSearchParams } from \"./util\";\r\nimport { Profiler } from \"components/profiler\";\r\n\r\nexport const ProjectListScreen = () => {\r\n  useDocumentTitle(\"项目列表\", false);\r\n\r\n  const { open } = useProjectModal();\r\n  const [param, setParam] = useProjectSearchParams();\r\n  //使用工具来控制输入文本时发送请求的次数\r\n  // const cleanObj = useCleanObj(debParam);\r\n  const debParam = useDebounce(param, 300);\r\n  const { isLoading, error, data: list } = useProjects(debParam);\r\n  // 设置用户\r\n  const { data: users } = useUsers();\r\n\r\n  return (\r\n    <Profiler id={\"项目列表\"}>\r\n      <Container>\r\n        <Row justify={\"space-between\"}>\r\n          <h1>项目列表</h1>\r\n          <Button onClick={open}>创建项目</Button>\r\n        </Row>\r\n        <SearchPanel\r\n          users={users || []}\r\n          param={param}\r\n          setParam={setParam}\r\n        ></SearchPanel>\r\n        {/* {error ?  // <Typography.Text type={\"danger\"}>{error.message}</Typography.Text>:\r\n      null} */}\r\n        <ErrorBox error={error} />\r\n\r\n        <List\r\n          users={users || []}\r\n          loading={isLoading}\r\n          dataSource={list || []}\r\n        ></List>\r\n      </Container>\r\n    </Profiler>\r\n  );\r\n};\r\n// 设置监测该组件\r\n// ProjectListScreen.whyDidYouRender = true;\r\n// 类型守卫\r\nconst isError = (value: any): value is Error => value?.message;\r\n\r\nexport const ErrorBox = ({ error }: { error: unknown }) => {\r\n  if (isError(error)) {\r\n    return <Typography.Text type={\"danger\"}>{error.message}</Typography.Text>;\r\n  }\r\n  return null;\r\n};\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  padding: 3.2rem;\r\n`;\r\n","import React from \"react\";\r\nimport { useUsers } from \"utils/user\";\r\nimport { IdSelect } from \"./id.select\";\r\n\r\nexport const UserSelect = (props: React.ComponentProps<typeof IdSelect>) => {\r\n  const { data: user } = useUsers();\r\n  return <IdSelect options={user || []} {...props} />;\r\n};\r\n","import { useCallback, useReducer, useState } from \"react\";\r\nimport { useMountRef } from \"utils/index\";\r\n\r\ninterface State<D> {\r\n  error: Error | null;\r\n  data: D | null;\r\n  stat: \"idle\" | \"loading\" | \"error\" | \"success\";\r\n}\r\n\r\nconst defaultInitialState: State<null> = {\r\n  stat: \"idle\",\r\n  data: null,\r\n  error: null,\r\n};\r\n\r\nconst defaultConfig = {\r\n  throwOnError: false,\r\n};\r\n\r\n// 防止组件还没异步完成就被卸载\r\nconst useSafeDispatch = <T>(dispatch: (...args: T[]) => void) => {\r\n  const mountedRef = useMountRef();\r\n  return useCallback(\r\n    (...args: T[]) => (mountedRef.current ? dispatch(...args) : void 0),\r\n    [dispatch, mountedRef]\r\n  );\r\n};\r\n\r\nexport const useAsync = <D>(\r\n  initialState?: State<D>,\r\n  initialConfig?: typeof defaultConfig\r\n) => {\r\n  const config = { ...defaultConfig, ...initialConfig };\r\n  // 使用useReducer进行多个相关联的状态管理\r\n  const [state, dispatch] = useReducer(\r\n    (state: State<D>, action: Partial<State<D>>) => ({ ...state, ...action }),\r\n    {\r\n      ...defaultInitialState,\r\n      ...initialState,\r\n    }\r\n  );\r\n  const safeDispatch = useSafeDispatch(dispatch);\r\n  // useState直接传入函数的含义是：惰性初始化；所以，要用useState保存函数，不能直接传入函数\r\n  // https://codesandbox.io/s/blissful-water-230u4?file=/src/App.js\r\n  const [retry, setRetry] = useState(() => () => {});\r\n\r\n  const setData = useCallback(\r\n    (data: D) =>\r\n      safeDispatch({\r\n        data,\r\n        stat: \"success\",\r\n        error: null,\r\n      }),\r\n    [safeDispatch]\r\n  );\r\n\r\n  const setError = useCallback(\r\n    (error: Error) =>\r\n      safeDispatch({\r\n        error,\r\n        stat: \"error\",\r\n        data: null,\r\n      }),\r\n    [safeDispatch]\r\n  );\r\n\r\n  // run 用来触发异步请求\r\n  const run = useCallback(\r\n    (promise: Promise<D>, runConfig?: { retry: () => Promise<D> }) => {\r\n      if (!promise || !promise.then) {\r\n        throw new Error(\"请传入 Promise 类型数据\");\r\n      }\r\n      setRetry(() => () => {\r\n        if (runConfig?.retry) {\r\n          run(runConfig?.retry(), runConfig);\r\n        }\r\n      });\r\n      safeDispatch({ stat: \"loading\" });\r\n      return promise\r\n        .then((data) => {\r\n          setData(data);\r\n          return data;\r\n        })\r\n        .catch((error) => {\r\n          // catch会消化异常，如果不主动抛出，外面是接收不到异常的\r\n          setError(error);\r\n          if (config.throwOnError) return Promise.reject(error);\r\n          return error;\r\n        });\r\n    },\r\n    [config.throwOnError, setData, setError, safeDispatch]\r\n  );\r\n\r\n  return {\r\n    isIdle: state.stat === \"idle\",\r\n    isLoading: state.stat === \"loading\",\r\n    isError: state.stat === \"error\",\r\n    isSuccess: state.stat === \"success\",\r\n    run,\r\n    setData,\r\n    setError,\r\n    // retry 被调用时重新跑一遍run，让state刷新一遍\r\n    retry,\r\n    ...state,\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { Select } from \"antd\";\r\nimport { Row } from \"type\";\r\n\r\n// 得到Select组件的类型\r\ntype SelectProps = React.ComponentProps<typeof Select>;\r\ninterface IdSelectProps\r\n  // 防止类型冲突\r\n  extends Omit<SelectProps, \"value\" | \"onChange\" | \"options\"> {\r\n  value?: Row | null | undefined;\r\n  onChange?: (value?: number) => void;\r\n  defaultOptionName?: string;\r\n  options?: { name: string; id: number }[];\r\n}\r\n/*\r\n    value可以传入多种类型的值\r\n    onChange只会回调number | undefined类型\r\n    当isNaN(Number(value))为true的时候,代表选择默认类型\r\n    当选择默认类型的时候,onchange会回调undefined\r\n*/\r\nexport const IdSelect = (props: IdSelectProps) => {\r\n  const { value, onChange, defaultOptionName, options, ...restProps } = props;\r\n  return (\r\n    <Select\r\n      // 防止页面加载时Select显示数字\r\n      value={options?.length ? toNumber(value) : 0}\r\n      onChange={(value) => onChange?.(toNumber(value) || undefined)}\r\n      {...restProps}\r\n    >\r\n      {defaultOptionName ? (\r\n        <Select.Option value={0}>{defaultOptionName}</Select.Option>\r\n      ) : null}\r\n      {options?.map((option) => (\r\n        <Select.Option key={option.id} value={option.id}>\r\n          {option.name}\r\n        </Select.Option>\r\n      ))}\r\n    </Select>\r\n  );\r\n};\r\n\r\nconst toNumber = (value: unknown) => (isNaN(Number(value)) ? 0 : Number(value));\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { ReactNode } from \"react\";\r\nimport { AuthProvider } from \"context/auth-context\";\r\nimport { QueryClientProvider, QueryClient } from \"react-query\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\n\r\nexport const AppProviders = ({ children }: { children: ReactNode }) => {\r\n  const queryClient = new QueryClient({\r\n    defaultOptions: {\r\n      queries: {\r\n        // 页面focus的时候重新发送请求\r\n        refetchOnWindowFocus: false,\r\n      },\r\n    },\r\n  });\r\n  return (\r\n    <QueryClientProvider client={queryClient}>\r\n      <Router>\r\n        <AuthProvider>{children}</AuthProvider>\r\n      </Router>\r\n    </QueryClientProvider>\r\n  );\r\n};\r\n","import React from \"react\";\r\n//错误边界，当发送渲染异常的时候，在生产模式也能在页面显示错误\r\ntype FallbackRender = (props: { error: Error | null }) => React.ReactElement;\r\nexport default class ErrorBoundary extends React.Component<\r\n  // React.PropsWithChildren 相当于 {children: ReactNode}\r\n  React.PropsWithChildren<{ fallbackRender: FallbackRender }>,\r\n  { error: Error | null }\r\n> {\r\n  state = { error: null };\r\n  // 当 ErrorBoundary 的子组件发生渲染错误，下面的就会被调用，返回的值赋值给state\r\n  static getDerivedStateFromError(error: Error) {\r\n    return { error };\r\n  }\r\n  render() {\r\n    const { error } = this.state;\r\n    const { fallbackRender, children } = this.props;\r\n    if (error) {\r\n      return fallbackRender({ error });\r\n    }\r\n    return children;\r\n  }\r\n}\r\n","import React from \"react\";\n// import AuthenticatedApp from \"authenticated-app\";\n// import UnauthenticatedApp from \"unauthenticated-app\";\nimport { useAuth } from \"./context/auth-context\";\nimport { FullPageErrorMes, FullPageLoading } from \"components/lib\";\nimport ErrorBoundary from \"components/error-boundary\";\nimport \"./App.css\";\n// 代码分割优化React\nconst AuthenticatedApp = React.lazy(() => import(\"authenticated-app\"));\nconst UnauthenticatedApp = React.lazy(() => import(\"unauthenticated-app\"));\n\nfunction App() {\n  const { user } = useAuth();\n\n  return (\n    <div className=\"App\">\n      <ErrorBoundary fallbackRender={FullPageErrorMes}>\n        {/* 异步加载的时候渲染这个FullPageLoading */}\n        <React.Suspense fallback={<FullPageLoading />}>\n          {user ? <AuthenticatedApp /> : <UnauthenticatedApp />}\n        </React.Suspense>\n      </ErrorBoundary>\n    </div>\n  );\n}\n\nexport default App;\n","import \"./wdyr\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { DevTools, loadServer } from \"jira-dev-tool\";\n// 务必在jira-dev-tool后面引用\nimport \"antd/dist/antd.less\";\nimport { AppProviders } from \"context\";\nimport App from \"./App\";\nimport { Profiler } from \"components/profiler\";\n\nloadServer(() =>\n  ReactDOM.render(\n    <React.StrictMode>\n      {/* 在第一次加载的时候记录 */}\n      <Profiler id={\"Root App\"} phases={[\"mount\"]}>\n        <AppProviders>\n          <DevTools />\n          <App />\n        </AppProviders>\n      </Profiler>\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n  )\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// 判断value是否为0，0的话不删除\r\nimport { useEffect, useRef, useState } from \"react\";\r\n\r\n// const isFalsy = (value: unknown) => (value === 0 ? false : !value);\r\n\r\nconst isVoid = (value: unknown) =>\r\n  value === undefined || value === null || value === \"\";\r\n// 在一个函数中，改变传入的对象本身是不好的\r\n// 将obj的类型限制为 key:value 的形式，就不会报错了，而不是object类型（太广）\r\nexport const cleanObj = (obj?: { [key: string]: unknown } | undefined) => {\r\n  if (!obj) {\r\n    return {};\r\n  }\r\n  const result = { ...obj };\r\n  Object.keys(result).forEach((key) => {\r\n    const value = result[key];\r\n    if (isVoid(value)) {\r\n      delete result[key];\r\n    }\r\n  });\r\n  return result;\r\n};\r\n\r\n// export const useCleanObj = (obj: Object) => {\r\n//   const result = { ...obj };\r\n//   // const [result, setResult] = useState(obj);\r\n//   useEffect(() => {\r\n//     Object.keys(result).forEach((key) => {\r\n//       // @ts-ignore\r\n//       const value = result[key];\r\n//       if (isFalsy(value)) {\r\n//         // @ts-ignore\r\n//         delete result[key];\r\n//       }\r\n//     });\r\n//   }, [obj]);\r\n//   return result;\r\n// };\r\n\r\nexport const useMount = (callback: () => void) => {\r\n  // 消除警告\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  useEffect(() => callback(), []);\r\n};\r\n\r\nexport const useDebounce = <V>(value: V, delay?: number) => {\r\n  const [debValue, setDebValue] = useState(value);\r\n\r\n  useEffect(() => {\r\n    // 每次在value变化后，设定一个定时器\r\n    const timeout = setTimeout(() => setDebValue(value), delay);\r\n    // 每次在上一个useEffect处理完以后在运行\r\n    return () => clearTimeout(timeout);\r\n  }, [value, delay]);\r\n  return debValue;\r\n};\r\n// 动态变换标题\r\nexport const useDocumentTitle = (\r\n  title: string,\r\n  keepOnUnmount: boolean = true\r\n) => {\r\n  //页面加载时:oldTitle === 旧 title 'React App\"\r\n  //加载后:oldTitle ===新title\r\n  //useRef保存最初的值，组件生命周期发生变化，他的值不会变化\r\n  const oldTitle = useRef(document.title).current;\r\n  useEffect(() => {\r\n    document.title = title;\r\n  }, [title]);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (!keepOnUnmount) {\r\n        // 当不指定依赖时，读到的就是旧的title--闭包陷阱\r\n        document.title = oldTitle;\r\n      }\r\n    };\r\n  }, [title, oldTitle, keepOnUnmount]);\r\n};\r\n\r\nexport const resetRoutes = () =>\r\n  (window.location.href = window.location.origin);\r\n\r\n/**\r\n * 存在问题，如果组件在异步请求的过程中突然被卸载，系统会报错，所以设置下面的hook\r\n * @returns 返回组件的挂载状态，如果还没挂载或者已经卸载，返回false，反之，返回true\r\n */\r\nexport const useMountRef = () => {\r\n  const mountedRef = useRef(false);\r\n\r\n  useEffect(() => {\r\n    // 组件加载的时候设置为true\r\n    mountedRef.current = true;\r\n    // 组件卸载设置为false\r\n    return () => {\r\n      mountedRef.current = false;\r\n    };\r\n  }, [mountedRef]);\r\n  return mountedRef;\r\n};\r\n\r\n/**\r\n * 传入一个对象，和键集合，返回对应的对象中的键值对\r\n * @param obj\r\n * @param keys\r\n */\r\nexport const subset = <\r\n  O extends { [key in string]: unknown },\r\n  K extends keyof O\r\n>(\r\n  obj: O,\r\n  keys: K[]\r\n) => {\r\n  // 将对象{obj:'aaa'}转换成['obj','aaa']\r\n  const filteredEntries = Object.entries(obj).filter(([key]) =>\r\n    keys.includes(key as K)\r\n  );\r\n  return Object.fromEntries(filteredEntries) as Pick<O, K>;\r\n};\r\n","import qs from \"qs\";\r\nimport * as auth from \"auth-provider\";\r\nimport { useAuth } from \"context/auth-context\";\r\nimport { useCallback } from \"react\";\r\n\r\nconst apiUrl = process.env.REACT_APP_API_URL;\r\n\r\ninterface Config extends RequestInit {\r\n  token?: string;\r\n  data?: object;\r\n}\r\n\r\nexport const http = async (\r\n  endpoint: string,\r\n  { data, token, headers, ...customConfig }: Config = {}\r\n) => {\r\n  const config = {\r\n    method: \"GET\",\r\n    headers: {\r\n      Authorization: token ? `Bearer ${token}` : \"\",\r\n      \"Content-Type\": data ? \"application/json\" : \"\",\r\n    },\r\n    ...customConfig,\r\n  };\r\n\r\n  if (config.method.toUpperCase() === \"GET\") {\r\n    endpoint += `?${qs.stringify(data)}`;\r\n  } else {\r\n    config.body = JSON.stringify(data || {});\r\n  }\r\n\r\n  // axios 和 fetch 的表现不一样，axios可以直接在返回状态不为2xx的时候抛出异常\r\n  return window\r\n    .fetch(`${apiUrl}/${endpoint}`, config)\r\n    .then(async (response) => {\r\n      if (response.status === 401) {\r\n        await auth.logout();\r\n        window.location.reload();\r\n        return Promise.reject({ message: \"请重新登录\" });\r\n      }\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        return data;\r\n      } else {\r\n        // 在fetch中必须要手动抛出异常\r\n        return Promise.reject(data);\r\n      }\r\n    });\r\n};\r\n\r\n// JS 中的typeof，是在runtime时运行的\r\n// return typeof 1 === 'number'\r\n\r\n// TS 中的typeof，是在静态环境运行的\r\n// return (...[endpoint, config]: Parameters<typeof http>) =>\r\nexport const useHttp = () => {\r\n  const { user } = useAuth();\r\n  // utility type 的用法：用泛型给它传入一个其他类型，然后utility type对这个类型进行某种操作\r\n  // 设定数组内的类型为 http 的类型\r\n  // 在元组前面加... 可以保证里面的参数可选\r\n  return useCallback(\r\n    (...[endpoint, config]: Parameters<typeof http>) =>\r\n      http(endpoint, { ...config, token: user?.token }),\r\n    [user?.token]\r\n  );\r\n};\r\n\r\n// 类型别名、Utility Type 讲解\r\n// 联合类型\r\n// let myFavoriteNumber: string | number;\r\n// myFavoriteNumber = \"seven\";\r\n// myFavoriteNumber = 7;\r\n// // TS2322: Type '{}' is not assignable to type 'string | number'.\r\n// // myFavoriteNumber = {}\r\n// let jackFavoriteNumber: string | number;\r\n\r\n// // 类型别名在很多情况下可以和interface互换\r\n// // interface Person {\r\n// //   name: string\r\n// // }\r\n// // type Person = { name: string }\r\n// // const xiaoMing: Person = {name: 'xiaoming'}\r\n\r\n// // 类型别名, interface 在这种情况下没法替代type\r\n// type FavoriteNumber = string | number;\r\n// let roseFavoriteNumber: FavoriteNumber = \"6\";\r\n\r\n// // interface 也没法实现Utility type\r\n// type Person = {\r\n//   name: string;\r\n//   age: number;\r\n// };\r\n// const xiaoMing: Partial<Person> = {};\r\n// const shenMiRen: Omit<Person, \"name\" | \"age\"> = {};\r\n// type PersonKeys = keyof Person;\r\n// type PersonOnlyName = Pick<Person, \"name\" | \"age\">;\r\n// type Age = Exclude<PersonKeys, \"name\">;\r\n\r\n// // Partial 的实现\r\n// type Partial<T> = {\r\n//   [P in keyof T]?: T[P];\r\n// };\r\n","import React from \"react\";\r\nimport styled from \"@emotion/styled\";\r\nimport { Button, Spin } from \"antd\";\r\nimport { DevTools } from \"jira-dev-tool\";\r\nimport { ErrorBox } from \"screens/project-list\";\r\n\r\nexport const Row = styled.div<{\r\n  gap?: number | boolean;\r\n  between?: boolean;\r\n  marginBottom?: number;\r\n}>`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: ${(props) => (props.between ? \"space-between\" : undefined)};\r\n  margin-bottom: ${(props) => props.marginBottom + \"rem\"};\r\n  > * {\r\n    margin-top: 0 !important;\r\n    margin-bottom: 0 !important;\r\n    margin-right: ${(props) =>\r\n      typeof props.gap === \"number\"\r\n        ? props.gap + \"rem\"\r\n        : props.gap\r\n        ? \"2rem\"\r\n        : undefined};\r\n  }\r\n`;\r\n\r\nconst FullPage = styled.div`\r\n  height: 100vh;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\nexport const FullPageLoading = () => (\r\n  <FullPage>\r\n    <Spin size={\"large\"} />\r\n  </FullPage>\r\n);\r\n\r\nexport const FullPageErrorMes = ({ error }: { error: Error | null }) => (\r\n  <FullPage>\r\n    <DevTools />\r\n    {/* <Typography.Text type={\"danger\"}>{error?.message}</Typography.Text> */}\r\n    <ErrorBox error={error} />\r\n  </FullPage>\r\n);\r\n\r\nexport const ButtonNoPadding = styled(Button)`\r\n  padding: 0;\r\n`;\r\n\r\nexport const ScreenContainer = styled.div`\r\n  padding: 3.2rem;\r\n  width: 100%;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n","import { QueryKey, useMutation, useQuery, useQueryClient } from \"react-query\";\r\nimport { Project } from \"type/project\";\r\nimport { cleanObj } from \"utils\";\r\nimport { useHttp } from \"./http\";\r\nimport { useDeleteConfig, useEditConfig } from \"./use-optimistic-options\";\r\n\r\nexport const useProjects = (param?: Partial<Project>) => {\r\n  const client = useHttp();\r\n  // const { run, ...result } = useAsync<Project[]>();\r\n  // const fetchProject = useCallback(\r\n  //   () => client(\"projects\", { data: cleanObj(param || {}) }),\r\n  //   [client, param]\r\n  // );\r\n  // //   param改变时发送请求\r\n  // useEffect(() => {\r\n  //   run(fetchProject(), {\r\n  //     retry: fetchProject,\r\n  //   });\r\n  // }, [param, run, fetchProject]);\r\n  // return result;\r\n  // []表示里面的数据发送变化时重新触发useQuery\r\n  return useQuery<Project[]>([\"projects\", cleanObj(param)], () =>\r\n    client(\"projects\", { data: param })\r\n  );\r\n};\r\n\r\n// 编辑\r\nexport const useEditProject = (queryKey: QueryKey) => {\r\n  // const { run, ...asyncResult } = useAsync();\r\n  const client = useHttp();\r\n  // const mutate = (params: Partial<Project>) => {\r\n  //   return run(\r\n  //     client(`projects/${params.id}`, {\r\n  //       data: params,\r\n  //       method: \"PATCH\",\r\n  //     })\r\n  //   );\r\n  // };\r\n  // return {\r\n  //   mutate,\r\n  //   ...asyncResult,\r\n  // };\r\n  return useMutation(\r\n    (params: Partial<Project>) =>\r\n      client(`projects/${params.id}`, {\r\n        data: params,\r\n        method: \"PATCH\",\r\n      }),\r\n    useEditConfig(queryKey)\r\n    // onSuccess: () => queryClient.invalidateQueries(queryKey),\r\n    // // 乐观更新\r\n    // async onMutate(target) {\r\n    //   const previousItems = queryClient.getQueryData(queryKey);\r\n    //   queryClient.setQueryData(queryKey, (old?: Project[]) => {\r\n    //     return (\r\n    //       old?.map((project) =>\r\n    //         project.id === target.id ? { ...project, ...target } : project\r\n    //       ) || []\r\n    //     );\r\n    //   });\r\n    //   return { previousItems };\r\n    // },\r\n    // // 出错误的时候回滚\r\n    // onError(error, newItems, context) {\r\n    //   queryClient.setQueryData(\r\n    //     queryKey,\r\n    //     (context as { previousItems: Project[] }).previousItems\r\n    //   );\r\n    // },\r\n  );\r\n};\r\n\r\n// 添加\r\nexport const useAddProject = (queryKey: QueryKey) => {\r\n  // const { run, ...asyncResult } = useAsync();\r\n  const client = useHttp();\r\n  const queryClient = useQueryClient();\r\n\r\n  return useMutation(\r\n    (params: Partial<Project>) =>\r\n      client(`projects`, {\r\n        data: params,\r\n        method: \"POST\",\r\n      }),\r\n    // 请求成功后刷新页面\r\n    {\r\n      onSuccess: () => queryClient.invalidateQueries(\"projects\"),\r\n    }\r\n    // useAddConfig(queryKey)\r\n  );\r\n\r\n  // const mutate = (params: Partial<Project>) => {\r\n  //   return run(\r\n  //     client(`/projects/:${params.id}`, {\r\n  //       data: params,\r\n  //       method: \"POST\",\r\n  //     })\r\n  //   );\r\n  // };\r\n  // return {\r\n  //   mutate,\r\n  //   ...asyncResult,\r\n  // };\r\n};\r\n\r\nexport const useDeleteProject = (queryKey: QueryKey) => {\r\n  const client = useHttp();\r\n\r\n  return useMutation(\r\n    ({ id }: { id: number }) =>\r\n      client(`projects/${id}`, {\r\n        method: \"DELETE\",\r\n      }),\r\n    useDeleteConfig(queryKey)\r\n  );\r\n};\r\n\r\nexport const useProject = (id?: number) => {\r\n  const client = useHttp();\r\n\r\n  return useQuery<Project>(\r\n    [\"project\", { id }],\r\n    () => client(`projects/${id}`),\r\n    {\r\n      //id是可选的 只有这个为真的时候才会触发上面\r\n      enabled: Boolean(id),\r\n    }\r\n  );\r\n};\r\n"],"sourceRoot":""}